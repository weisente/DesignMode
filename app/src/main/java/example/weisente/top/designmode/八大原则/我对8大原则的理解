单一责任原则：Single Responsibility Principle
定义：就一个类而言，应该仅有一个引起它变化的原因。简单来说，一个类中应该是一组相关性很高的函数、数据的封装。
反例：请求和缓存完全写到了一堆
例如做一个下载的工具 我们需要把下载和缓存进行分开

开闭原则：Open Close Principle
软件中的对象（类、模块、函数等）应该对于扩展是开放的，但是，对于修改是封闭（关闭）的。
当软件需要变化时，应该尽量通过扩展的方式来实现变化，而不是通过修改已有的代码来实现。
具体的实现  例如需要切换http引擎的时候，我们需要把http引擎写一个接口

里氏替换原则：Liskov Substitution Principle
只要父类能出现的地方子类就可以出现，主要体现就是实现和继承（意思是不要写死 多写接口方便替换）

依赖倒置原则


